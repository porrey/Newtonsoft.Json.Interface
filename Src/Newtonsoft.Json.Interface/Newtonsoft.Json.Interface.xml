<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newtonsoft.Json.Interface</name>
    </assembly>
    <members>
        <member name="T:Newtonsoft.Json.ConcreteConverter`1">
            <summary>
            Provides direction to the serializer and deserializer to use
            specific concrete class.
            </summary>
            <typeparam name="TConcrete"></typeparam>
        </member>
        <member name="M:Newtonsoft.Json.ConcreteConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>Returns true if this instance can convert the specified object type, false otherwise.</returns>
        </member>
        <member name="P:Newtonsoft.Json.ConcreteConverter`1.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.ConcreteConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write
            JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.ConcreteConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.ConcreteConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Newtonsoft.Json.InterfaceToConcreteConverter`2">
            <summary>
            This convert can be used on any interface definition to instruct the JSON
            serializer to use a specific concrete class when deserializing the instance.
            The type specified by TConcrete must implement the interface specified by
            TInterface.
            </summary>
            <typeparam name="TInterface">The Type that was serialized into the JSON text.</typeparam>
            <typeparam name="TConcrete">The Type that specifies the class that will be created.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.InterfaceToConcreteConverter`2.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>Returns true if this instance can convert the specified object type, false otherwise.</returns>
        </member>
        <member name="P:Newtonsoft.Json.InterfaceToConcreteConverter`2.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.InterfaceToConcreteConverter`2.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write
            JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.InterfaceToConcreteConverter`2.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.InterfaceToConcreteConverter`2.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
    </members>
</doc>
